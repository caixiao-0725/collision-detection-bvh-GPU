//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_52
.address_size 64

	// .globl	__miss__ms
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 8 .b8 params[32];
.global .align 1 .b8 $str[9] = {37, 100, 32, 32, 32, 37, 100, 10};

.visible .entry __miss__ms()
{
	.reg .b32 	%r<3>;


	mov.u32 	%r1, 4;
	mov.u32 	%r2, 0;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	ret;

}
	// .globl	__raygen__rg_edge
.visible .entry __raygen__rg_edge()
{
	.reg .f32 	%f<16>;
	.reg .b32 	%r<84>;
	.reg .b64 	%rd<15>;


	// begin inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// end inline asm
	ld.const.u64 	%rd2, [params];
	cvta.to.global.u64 	%rd3, %rd2;
	ld.const.u64 	%rd4, [params+8];
	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.u32 	%rd6, %r1, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.v2.u32 	{%r78, %r79}, [%rd7];
	mov.u32 	%r77, 0;
	mul.wide.s32 	%rd8, %r78, 12;
	add.s64 	%rd9, %rd3, %rd8;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd9+4];
	ld.global.f32 	%f3, [%rd9+8];
	mul.wide.s32 	%rd10, %r79, 12;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.f32 	%f10, [%rd11];
	ld.global.f32 	%f11, [%rd11+4];
	ld.global.f32 	%f12, [%rd11+8];
	sub.f32 	%f4, %f10, %f1;
	sub.f32 	%f5, %f11, %f2;
	sub.f32 	%f6, %f12, %f3;
	mul.f32 	%f13, %f5, %f5;
	fma.rn.f32 	%f14, %f4, %f4, %f13;
	fma.rn.f32 	%f15, %f6, %f6, %f14;
	sqrt.rn.f32 	%f8, %f15;
	ld.const.u64 	%rd1, [params+24];
	ld.const.u64 	%rd12, [params+16];
	cvta.to.global.u64 	%rd13, %rd12;
	mov.f32 	%f9, 0f00000000;
	mov.u32 	%r40, 255;
	mov.u32 	%r41, 10;
	mov.u32 	%r45, 2;
	// begin inline asm
	call(%r7,%r8,%r9,%r10,%r11,%r12,%r13,%r14,%r15,%r16,%r17,%r18,%r19,%r20,%r21,%r22,%r23,%r24,%r25,%r26,%r27,%r28,%r29,%r30,%r31,%r32,%r33,%r34,%r35,%r36,%r37,%r38),_optix_trace_typed_32,(%r77,%rd1,%f1,%f2,%f3,%f4,%f5,%f6,%f9,%f8,%f9,%r40,%r41,%r77,%r77,%r77,%r45,%r82,%r83,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77,%r77);
	// end inline asm
	add.s64 	%rd14, %rd13, %rd6;
	st.global.v2.u32 	[%rd14], {%r7, %r8};
	ret;

}
	// .globl	__anyhit__ch
.visible .entry __anyhit__ch()
{
	.local .align 8 .b8 	__local_depot2[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	// begin inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// end inline asm
	// begin inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// end inline asm
	// begin inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// end inline asm
	mov.u32 	%r7, 0;
	mad.lo.s32 	%r8, %r5, %r1, %r2;
	// begin inline asm
	call _optix_set_payload, (%r7, %r8);
	// end inline asm
	mov.u32 	%r10, 1;
	// begin inline asm
	call (%r9), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r10, %r9);
	// end inline asm
	st.local.v2.u32 	[%rd2], {%r8, %r9};
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r12, [retval0+0];
	} // callseq 0
	// begin inline asm
	call _optix_ignore_intersection, ();
	// end inline asm
	ret;

}
	// .globl	__closesthit__ch
.visible .entry __closesthit__ch()
{
	.local .align 8 .b8 	__local_depot3[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<5>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	// begin inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// end inline asm
	// begin inline asm
	call (%r2), _optix_get_launch_index_y, ();
	// end inline asm
	// begin inline asm
	call (%r5), _optix_get_launch_dimension_y, ();
	// end inline asm
	mov.u32 	%r7, 0;
	mad.lo.s32 	%r8, %r5, %r1, %r2;
	// begin inline asm
	call _optix_set_payload, (%r7, %r8);
	// end inline asm
	mov.u32 	%r10, 1;
	// begin inline asm
	call (%r9), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call _optix_set_payload, (%r10, %r9);
	// end inline asm
	st.local.v2.u32 	[%rd2], {%r8, %r9};
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r12, [retval0+0];
	} // callseq 1
	ret;

}

